diff --git a/node_modules/@rpgjs/client/lib/RpgClientEngine.js b/node_modules/@rpgjs/client/lib/RpgClientEngine.js
index 03b4607..014be89 100644
--- a/node_modules/@rpgjs/client/lib/RpgClientEngine.js
+++ b/node_modules/@rpgjs/client/lib/RpgClientEngine.js
@@ -191,7 +191,7 @@ class RpgClientEngine {
             if (!localEvent &&
                 (key == 'position' ||
                     (key == 'direction' && paramsChanged && paramsChanged.position))) {
-                if ((isMe() && this.pressInput) || !isMe())
+                // if ((isMe() && this.pressInput) || !isMe())
                     continue;
             }
             logic[key] = params[key];
@@ -251,11 +251,11 @@ class RpgClientEngine {
         common_1.RpgPlugin.emit(common_1.HookClient.Step, [this, t, dt], true);
         const { playerId } = this.gameEngine;
         const player = this.gameEngine.world.getObject(playerId);
-        if (player && this.isTeleported && this.pressInput) {
-            const { x, y } = player.position;
-            this.playerVault.add(SI.snapshot.create([{ id: playerId, x, y }]));
-            this.serverReconciliation();
-        }
+        // if (player && this.isTeleported && this.pressInput) {
+        //     const { x, y } = player.position;
+        //     this.playerVault.add(SI.snapshot.create([{ id: playerId, x, y }]));
+        //     this.serverReconciliation();
+        // }
         const snapshot = SI.calcInterpolation('x y');
         if (snapshot) {
             const { state } = snapshot;
diff --git a/node_modules/@rpgjs/client/lib/Scene/Scene.js b/node_modules/@rpgjs/client/lib/Scene/Scene.js
index a992df8..28be17c 100644
--- a/node_modules/@rpgjs/client/lib/Scene/Scene.js
+++ b/node_modules/@rpgjs/client/lib/Scene/Scene.js
@@ -151,7 +151,7 @@ class Scene {
      */
     showAnimation({ graphic, animationName, attachTo, x = 0, y = 0, loop = false, replaceGraphic = false }) {
         if (replaceGraphic && attachTo) {
-            return attachTo.showAnimation(graphic, animationName);
+            return attachTo.showAnimation(graphic, animationName, true);
         }
         const animation = new Animation_1.Animation(graphic);
         this.animationLayer.addChild(animation);
diff --git a/node_modules/@rpgjs/client/lib/Sprite/Character.js b/node_modules/@rpgjs/client/lib/Sprite/Character.js
index b4e1052..2a31569 100644
--- a/node_modules/@rpgjs/client/lib/Sprite/Character.js
+++ b/node_modules/@rpgjs/client/lib/Sprite/Character.js
@@ -107,18 +107,18 @@ class Character extends PIXI.Sprite {
             y: this.y - this.h * this.anchor.y + (isMiddle ? this.h / 2 : 0)
         };
     }
-    showAnimation(graphic, animationName) {
+    showAnimation(graphic, animationName, replace) {
         const refreshAnimation = (graphic) => {
             this.removeChild(this.animation);
             this.animation = new Animation_1.Animation(graphic);
             this.addChild(this.animation);
             this.setAnimationAnchor();
         };
-        const memoryGraphic = this.graphic;
+        const finalGraphic = replace ? graphic : this.graphic;
         refreshAnimation(graphic);
         this.animation.onFinish = () => {
             this.playStandardAnimation = true;
-            refreshAnimation(memoryGraphic);
+            refreshAnimation(finalGraphic);
             this.update(this.objSaved);
         };
         this.playStandardAnimation = false;
